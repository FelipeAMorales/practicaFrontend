pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'felipemoralescybertrust', description: 'nombre del docker')
        string(name: 'name_imagen_front', defaultValue: 'practicafrontct', description: 'nombre de la imagen del front')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'name_imagen_back', defaultValue: 'practicabackct',description: 'nombre de la imagen del back')
    }

    environment {
        name_final_front = "${name_container}/${name_imagen_front}:${tag_imagen}"
        name_final_back = "${name_container}/${name_imagen_back}:${tag_imagen}"
    }
    stages {
        stage("Eliminar todos los contenedores"){
            steps{
                script{
                    //Eliminando contenedor frontend
                    bat "docker stop ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm ${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //eliminando imagen frontend
                    bat "docker rmi ${name_container}/${name_imagen_front} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor backend
                    bat "docker stop ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm ${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen backend
                    bat "docker rmi ${name_container}/${name_imagen_back} || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest1
                    bat "docker stop hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm hawktest1 || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando imagen stackhank
                    bat "docker rmi stackhawk/hawkscan || (echo 'sigue jenkins' && exit 0)"
                    //Eliminando contenedor hawktest2
                    bat "docker stop hawktest2 || (echo 'sigue jenkins' && exit 0)"
                    bat "docker rm hawktest2 || (echo 'sigue jenkins' && exit 0)"
                }

            }
        }

        stage ("Pull HawkScan Image") {
            steps {
                script{
                    bat 'docker pull stackhawk/hawkscan:latest'
                }

            }
        }

        stage('Verificar Repo 1') {
            steps {
                script{
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                        doGenerateSubmoduleConfigurations: false, 
                        extensions: [], 
                        submoduleCfg: [], 
                        userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-frontend.git']]])
                }
            }
        }
        stage('Analisis Repo 1') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            bat "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-frontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.token=${SonarToJenkins}"
                        }
                    }
                }
            }
        }
        stage('Quality Gate Repo 1') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Repo 1') {
            steps {
                script {
                    bat """
                        docker build -t ${name_final_front} https://github.com/FelipeMoralesCyberTrust/PP-frontend.git
                    """
                }
            }
        }

        stage ("HawkScan Test Repo1") {
            steps {
                echo "Directorio de trabajo actual: ${WORKSPACE}"
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){
                    bat """docker run -v ${WORKSPACE}:/hawk:rw -t \
                        -e API_KEY=${hawk_api_key} \
                        -e NO_COLOR=true \
                        --name hawktest1 \
                        stackhawk/hawkscan"""
                }
            }
        }
        
        stage("Snyk Test Repo1"){
            steps{         
                script{
                    def snykResult= snykSecurity(
                        snykInstallation: 'SnykPlugin',
                        snykTokenId: "snyktoken",
                        severity: "--severity-Threshold=critical",
                        failOnIssues: false,
                        monitorProjectOnBuild: true,
                        additionalArguments: "--container '${name_final_front}'")
                    
                    /*
                    if (snykResult.contains("critical severity")) {
                        error('Se encontraron vulnerabilidades críticas. Deteniendo el pipeline.')
                    }
                    */
                }
            }
        }
        stage("Validando Snyk Test"){
            steps{
                script{
                    if (snykResult==null){
                        echo "continuar con jenkins"
                    }
                    else{
                        if (snykResult.contains("critical severity")){
                            error('SE encontraron vulnerabilidades criticas. Deteniendo el pipeline')
                        }
                        else{
                            echo "continuar con jenkins"
                        }
                    }
                }
            }
        }

        stage('Verificar Repo 2') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-backend.git']]])
            }
        }
        stage('Analisis Repo 2') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            bat "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-backend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.token=${SonarToJenkins}"
                        }
                    }
                }
            }
        }

        stage('Quality Gate Repo 2') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Repo 2') {
            steps {
                script {
                    bat """
                        docker build -t ${name_final_back} https://github.com/FelipeMoralesCyberTrust/PP-backend.git
                    """
                }
            }
        }

        stage ("HawkScan Test Repo2") {
            steps {
                echo "Directorio de trabajo actual: ${WORKSPACE}"
                withCredentials([string(credentialsId:'stackhawk-api-key', variable: 'hawk_api_key')]){
                    bat """docker run -v ${WORKSPACE}:/hawk:rw -t \
                        -e API_KEY=${hawk_api_key} \
                        -e NO_COLOR=true \
                        --name hawktest2 \
                        stackhawk/hawkscan"""
                }
            }
        }
        stage("Snyk Test Repo2"){
            steps{
                script{
                    def snykResult2 = snykSecurity(
                        snykInstallation: 'SnykPlugin',
                        snykTokenId: "snyktoken",
                        severity: "--severity-Threshold=medium",
                        failOnIssues: false,
                        monitorProjectOnBuild: true,
                        additionalArguments: "--container '${name_final_back}'")
                    
                    /*
                    if (snykResult2.contains("critical severity")) {
                        error('Se encontraron vulnerabilidades críticas. Deteniendo el pipeline.')
                    }
                    */
                }
            }
        }
        stage("Validando Snyk Test"){
            steps{
                script{
                    if (snykResult2==null){
                        echo "continuar con jenkins"
                    }
                    else{
                        if (snykResult2.contains("medium severity")){
                            error('Se encontraron vulnerabilidades criticas. Deteniendo el pipeline')
                        }
                        else{
                            echo "continuar con jenkins"
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto') {
                        bat 'docker-compose -f docker-compose.yml up -d'
                    }
                } //C:/ProgramData/Jenkins/.jenkins/workspace/pipelineproyecto
            }
        }
    }
}