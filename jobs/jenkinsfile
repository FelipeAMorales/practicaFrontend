pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'felipemoralescybertrust', description: 'nombre del docker')
        string(name: 'name_imagen_front', defaultValue: 'practicafrontct', description: 'nombre de la imagen del front')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        //string(name: 'puerto_imagen', defaultValue: '81', description: 'puerto a publicar')
        string(name: 'name_imagen_back', defaultValue: 'practicabackct',description: 'nombre de la imagen del back')
    }

    environment {
        name_final_front = "${name_container}/${name_imagen_front}:${tag_imagen}"
        name_final_back = "${name_container}/${name_imagen_back}:${tag_imagen}"
    }

    stages {
        stage('Detener/Eliminar FrontEnd') {
            steps {
                script {
                    def containerExists = sh(script: "docker ps -q --filter name=${name_final_front}", returnStatus: true) == 0
                    if (containerExists) {
                        sh "docker stop ${name_imagen_front} || true"
                        sh "docker rm ${name_imagen_front} || true"
                    }
                    else {
                        echo 'El contenedor ${name_imagen_front} no existe. No se detendr치.'
                    }
                }
            }
        }
        stage('Detener/Eliminar BackEnd') {
            steps {
                script {
                    def containerExists = sh(script: "docker ps -q --filter name=${name_final_back}", returnStatus: true) == 0
                    if (containerExists) {
                        sh "docker stop ${name_imagen_back} || true"
                        sh "docker rm ${name_imagen_back} || true"
                    }
                    else {
                        echo "El contenedor ${name_imagen_back} no existe. No se detendr치 ni eliminar치."
                    }
                }
            }
        }

        stage('Verificar Repo 1') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-frontend.git']]])
            }
        }
        stage('Analisis Repo 1') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-frontend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SonarToJenkins}"
                        }
                    }
                }
            }
        }
        stage('Quality Gate Repo 1') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Repo 1') {
            steps {
                script {
                    sh """
                        docker build -t ${name_final_back} https://github.com/FelipeMoralesCyberTrust/PP-frontend.git
                    """
                }
            }
        }

        stage('Verificar Repo 2') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'TokenGitFelipe', url: 'https://github.com/FelipeMoralesCyberTrust/PP-backend.git']]])
            }
        }
        stage('Analisis Repo 2') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('SonarCloud') {
                        withCredentials([string(credentialsId: 'SonarToJenkins', variable: 'SonarToJenkins')]) {
                            sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.organization=felipemoralescybertrust \
                            -Dsonar.projectKey=FelipeMoralesCyberTrust_PP-backend \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SonarToJenkins}"
                        }
                    }
                }
            }
        }

        stage('Quality Gate Repo 2') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Repo 2') {
            steps {
                script {
                    sh """
                        docker build -t ${name_final_back} https://github.com/FelipeMoralesCyberTrust/PP-backend.git
                    """
                }
            }
        }
        /*
        stage('Procesar Resultados StackHawk'){
            steps{
                script{
                    def response = httpRequest(url:'https://job/pipelineProyecto/', httpMode: 'POST', contentType:'APPLICATION_JSON')
                    def datos = responde.content
                    if (datos.contains("Scan Completed")) {
                        echo "El escaneo ha sido completado."
                    } else if (datos.contains("Scan Errored")) {
                        echo "Ocurri칩 un error durante el escaneo."
                        error "Error durante el escaneo. Deteniendo el trabajo."
                    }
                }
            }
        }*/
//http://54.207.206.167:8080/job/pipelineProyecto/
        /*
        stage('Procesar Resultados StackHawk') {
            steps {
                script {
                    def stackhawkWebhookUrl = 'http://54.207.206.167:8080/job/pipelineProyecto/'
                    def authToken = 'TokenToStackhawk'
                    
                    def response = httpRequest(
                        acceptType: 'APPLICATION_JSON',
                        contentType: 'APPLICATION_JSON',
                        httpMode: 'POST',
                        requestBody: '{}',
                        url: stackhawkWebhookUrl,
                        customHeaders: [[name: 'pipelineProyecto', value: authToken]]
                    )
                    
                    println "Respuesta del servidor Jenkins: ${response}"
                }
            }
        }*/

        stage ("Pull HawkScan Image") {
            steps {
                sh 'docker pull stackhawk/hawkscan'
            }
        }
        stage ("Run HawkScan Test") {
            environment {
                HAWK_API_KEY = credentials('TokenToStackhawk')
            }
            steps {
                sh '''
                    docker run -v ${WORKSPACE}:/hawk:rw -t \
                    -e API_KEY=${HAWK_API_KEY} \
                    -e NO_COLOR=true \
                    stackhawk/hawkscan
                '''
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('/var/lib/jenkins/jobs/pipelineProyecto') {
                        sh 'docker-compose -f docker-compose.yml up -d'
                    }
                } //C:/ProgramData/Jenkins/.jenkins/workspace/pipelineProyecto
            }
        }
    }
}